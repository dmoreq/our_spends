import 'package:flutter_test/flutter_test.dart';
import 'package:our_spends/services/ai_service.dart';
import 'package:our_spends/services/database_service.dart';
import 'package:our_spends/models/expense.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  group('AI and Database Integration Tests', () {
    late AIService aiService;
    late DatabaseService databaseService;
    
    setUp(() async {
      // Initialize SharedPreferences mock
      SharedPreferences.setMockInitialValues({
        'ai_provider': 'gemini', // Set default provider for testing
      });
      
      // Create service instances
      aiService = AIService();
      databaseService = DatabaseService();
      
      // Initialize the services
      await aiService.initialize();
      await databaseService.initialize();
    });

    test('Extract expense and save to database', () async {
      // Skip if API key is not configured
      if (const String.fromEnvironment('GEMINI_API_KEY').isEmpty) {
        markTestSkipped('Skipping test because GEMINI_API_KEY is not set');
        return;
      }
      
      const userId = 'test-user-id';
      const message = 'I spent \$50 on groceries yesterday';
      
      // Process the message with AI service
      final conversationHistory = [];
      final result = await aiService.processMessage(
        message: message,
        conversationHistory: conversationHistory,
        languageCode: 'en',
      );
      
      // Verify AI extracted the expense information
      expect(result, isNotNull);
      expect(result!['hasExpense'], isTrue);
      expect(result['amount'], 50);
      expect(result['description'] ?? result['item'], contains('groceries'));
      
      // Create an expense object from the extracted information
      final yesterday = DateTime.now().subtract(const Duration(days: 1));
      final dateTime = DateTime(
        yesterday.year,
        yesterday.month,
        yesterday.day,
      );
      
      final expense = Expense(
        id: '', // Will be generated by database service
        userId: userId,
        date: dateTime,
        amount: result['amount'] is double 
            ? result['amount'] 
            : double.parse(result['amount'].toString()),
        currency: result['currency'] ?? 'USD',
        category: result['category'] == 'food' ? 'Food & Dining' : 'Other',
        item: result['description'] ?? result['item'] ?? 'Expense',
        description: result['description'],
        location: result['location'] ?? 'Unknown',
      );
      
      // Save the expense to the database
      final expenseId = await databaseService.addExpense(expense);
      
      // Verify the expense was saved
      expect(expenseId, isNotNull);
      expect(expenseId, isNotEmpty);
      
      // Retrieve the expense from the database
      final expenses = await databaseService.getExpenses(userId);
      
      // Verify the expense was retrieved
      expect(expenses, isNotEmpty);
      
      // Find the saved expense
      final savedExpense = expenses.firstWhere((e) => e.id == expenseId);
      
      // Verify the expense details
      expect(savedExpense.amount, 50);
      expect(savedExpense.category, 'Food & Dining');
      expect(savedExpense.item, contains('groceries'));
      expect(savedExpense.date.year, dateTime.year);
      expect(savedExpense.date.month, dateTime.month);
      expect(savedExpense.date.day, dateTime.day);
    });

    test('Generate spending insights from database expenses', () async {
      // Skip if API key is not configured
      if (const String.fromEnvironment('GEMINI_API_KEY').isEmpty) {
        markTestSkipped('Skipping test because GEMINI_API_KEY is not set');
        return;
      }
      
      const userId = 'test-user-id';
      
      // Create test expenses
      final today = DateTime.now();
      final yesterday = DateTime.now().subtract(const Duration(days: 1));
      
      final expenses = [
        Expense(
          id: '', // Will be generated by database service
          userId: userId,
          date: today,
          amount: 50.0,
          currency: 'USD',
          category: 'Food & Dining',
          item: 'Lunch',
          description: 'Lunch at restaurant',
          location: 'Restaurant',
        ),
        Expense(
          id: '', // Will be generated by database service
          userId: userId,
          date: yesterday,
          amount: 30.0,
          currency: 'USD',
          category: 'Transportation',
          item: 'Taxi',
          description: 'Taxi to work',
          location: 'City',
        ),
      ];
      
      // Save expenses to the database
      for (final expense in expenses) {
        await databaseService.addExpense(expense);
      }
      
      // Retrieve expenses from the database
      final dbExpenses = await databaseService.getExpenses(userId);
      
      // Verify expenses were saved
      expect(dbExpenses.length, 2);
      
      // Generate insights using AI service
      final insights = await aiService.generateSpendingInsights(
        expenses: dbExpenses,
        languageCode: 'en',
      );
      
      // Verify insights were generated
      expect(insights, isNotNull);
      expect(insights!['message'], isNotNull);
      expect(insights['message'], isNotEmpty);
      
      // Verify insights contain relevant information
      final message = insights['message'] as String;
      expect(message, anyOf(contains('\$50'), contains('50'), contains('USD')));
      expect(message, anyOf(contains('\$30'), contains('30'), contains('USD')));
      expect(message, anyOf(contains('Food'), contains('Dining'), contains('Lunch')));
      expect(message, anyOf(contains('Transportation'), contains('Taxi')));
    });
  });
}