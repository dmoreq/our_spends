// Mocks generated by Mockito 5.4.6 from annotations
// in our_spends/test/screens/ai_chat_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:our_spends/models/currency.dart' as _i3;
import 'package:our_spends/models/expense.dart' as _i5;
import 'package:our_spends/models/tag.dart' as _i10;
import 'package:our_spends/providers/expense/expense_provider.dart' as _i4;
import 'package:our_spends/providers/language_provider.dart' as _i7;
import 'package:our_spends/services/ai_service.dart' as _i11;
import 'package:our_spends/services/database/database_service.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocale_0 extends _i1.SmartFake implements _i2.Locale {
  _FakeLocale_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCurrency_1 extends _i1.SmartFake implements _i3.Currency {
  _FakeCurrency_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ExpenseProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseProvider extends _i1.Mock implements _i4.ExpenseProvider {
  MockExpenseProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i5.Expense> get expenses =>
      (super.noSuchMethod(
            Invocation.getter(#expenses),
            returnValue: <_i5.Expense>[],
          )
          as List<_i5.Expense>);

  @override
  List<Map<String, dynamic>> get expensesWithTags =>
      (super.noSuchMethod(
            Invocation.getter(#expensesWithTags),
            returnValue: <Map<String, dynamic>>[],
          )
          as List<Map<String, dynamic>>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  _i6.Future<void> get initializationDone =>
      (super.noSuchMethod(
            Invocation.getter(#initializationDone),
            returnValue: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Stream<List<Map<String, dynamic>>> get expensesStream =>
      (super.noSuchMethod(
            Invocation.getter(#expensesStream),
            returnValue: _i6.Stream<List<Map<String, dynamic>>>.empty(),
          )
          as _i6.Stream<List<Map<String, dynamic>>>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> loadExpenses() =>
      (super.noSuchMethod(
            Invocation.method(#loadExpenses, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void setLoading(bool? loading) => super.noSuchMethod(
    Invocation.method(#setLoading, [loading]),
    returnValueForMissingStub: null,
  );

  @override
  void setError(String? error) => super.noSuchMethod(
    Invocation.method(#setError, [error]),
    returnValueForMissingStub: null,
  );

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> loadExpensesForTesting() =>
      (super.noSuchMethod(
            Invocation.method(#loadExpensesForTesting, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<String?> addExpense(_i5.Expense? expense, List<String>? tagIds) =>
      (super.noSuchMethod(
            Invocation.method(#addExpense, [expense, tagIds]),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<bool> updateExpense(_i5.Expense? expense, List<String>? tagIds) =>
      (super.noSuchMethod(
            Invocation.method(#updateExpense, [expense, tagIds]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> deleteExpense(String? expenseId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpense, [expenseId]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<Map<String, List<_i5.Expense>>> getExpensesGroupedByTag({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getExpensesGroupedByTag, [], {
              #startDate: startDate,
              #endDate: endDate,
            }),
            returnValue: _i6.Future<Map<String, List<_i5.Expense>>>.value(
              <String, List<_i5.Expense>>{},
            ),
          )
          as _i6.Future<Map<String, List<_i5.Expense>>>);

  @override
  _i6.Future<Map<String, dynamic>?> getExpenseWithTags(String? expenseId) =>
      (super.noSuchMethod(
            Invocation.method(#getExpenseWithTags, [expenseId]),
            returnValue: _i6.Future<Map<String, dynamic>?>.value(),
          )
          as _i6.Future<Map<String, dynamic>?>);

  @override
  void addListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [LanguageProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageProvider extends _i1.Mock implements _i7.LanguageProvider {
  MockLanguageProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Locale get currentLocale =>
      (super.noSuchMethod(
            Invocation.getter(#currentLocale),
            returnValue: _FakeLocale_0(this, Invocation.getter(#currentLocale)),
          )
          as _i2.Locale);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i6.Future<void> changeLanguage(String? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#changeLanguage, [languageCode]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  String getCurrentLanguageName() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentLanguageName, []),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getCurrentLanguageName, []),
            ),
          )
          as String);

  @override
  String getLanguageName(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#getLanguageName, [code]),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getLanguageName, [code]),
            ),
          )
          as String);

  @override
  void addListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i9.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i5.Expense>> getExpenses({
    DateTime? startDate,
    DateTime? endDate,
    double? minAmount,
    double? maxAmount,
    String? searchQuery,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getExpenses, [], {
              #startDate: startDate,
              #endDate: endDate,
              #minAmount: minAmount,
              #maxAmount: maxAmount,
              #searchQuery: searchQuery,
              #limit: limit,
              #offset: offset,
            }),
            returnValue: _i6.Future<List<_i5.Expense>>.value(<_i5.Expense>[]),
          )
          as _i6.Future<List<_i5.Expense>>);

  @override
  _i6.Future<_i5.Expense?> getExpenseById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getExpenseById, [id]),
            returnValue: _i6.Future<_i5.Expense?>.value(),
          )
          as _i6.Future<_i5.Expense?>);

  @override
  _i6.Future<String> insertExpense(_i5.Expense? expense) =>
      (super.noSuchMethod(
            Invocation.method(#insertExpense, [expense]),
            returnValue: _i6.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#insertExpense, [expense]),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<void> updateExpense(_i5.Expense? expense) =>
      (super.noSuchMethod(
            Invocation.method(#updateExpense, [expense]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteExpense(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpense, [id]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i5.Expense>> searchExpenses(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchExpenses, [query]),
            returnValue: _i6.Future<List<_i5.Expense>>.value(<_i5.Expense>[]),
          )
          as _i6.Future<List<_i5.Expense>>);

  @override
  _i6.Future<double> getMonthlySpending(int? year, int? month) =>
      (super.noSuchMethod(
            Invocation.method(#getMonthlySpending, [year, month]),
            returnValue: _i6.Future<double>.value(0.0),
          )
          as _i6.Future<double>);

  @override
  _i6.Future<List<Map<String, dynamic>>> getSpendingTrends({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getSpendingTrends, [], {
              #startDate: startDate,
              #endDate: endDate,
            }),
            returnValue: _i6.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i6.Future<List<Map<String, dynamic>>>);

  @override
  _i6.Future<String> exportToCSV({DateTime? startDate, DateTime? endDate}) =>
      (super.noSuchMethod(
            Invocation.method(#exportToCSV, [], {
              #startDate: startDate,
              #endDate: endDate,
            }),
            returnValue: _i6.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#exportToCSV, [], {
                  #startDate: startDate,
                  #endDate: endDate,
                }),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<List<_i10.Tag>> getTags() =>
      (super.noSuchMethod(
            Invocation.method(#getTags, []),
            returnValue: _i6.Future<List<_i10.Tag>>.value(<_i10.Tag>[]),
          )
          as _i6.Future<List<_i10.Tag>>);

  @override
  _i6.Future<_i10.Tag?> getTagById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTagById, [id]),
            returnValue: _i6.Future<_i10.Tag?>.value(),
          )
          as _i6.Future<_i10.Tag?>);

  @override
  _i6.Future<void> addTag(_i10.Tag? tag) =>
      (super.noSuchMethod(
            Invocation.method(#addTag, [tag]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateTag(_i10.Tag? tag) =>
      (super.noSuchMethod(
            Invocation.method(#updateTag, [tag]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deleteTag(String? tagId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTag, [tagId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<String>> getExpenseTags(String? expenseId) =>
      (super.noSuchMethod(
            Invocation.method(#getExpenseTags, [expenseId]),
            returnValue: _i6.Future<List<String>>.value(<String>[]),
          )
          as _i6.Future<List<String>>);

  @override
  _i6.Future<void> setExpenseTags(String? expenseId, List<String>? tagIds) =>
      (super.noSuchMethod(
            Invocation.method(#setExpenseTags, [expenseId, tagIds]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i3.Currency>> getCurrencies() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrencies, []),
            returnValue: _i6.Future<List<_i3.Currency>>.value(<_i3.Currency>[]),
          )
          as _i6.Future<List<_i3.Currency>>);

  @override
  _i6.Future<_i3.Currency> getUserPreferredCurrency() =>
      (super.noSuchMethod(
            Invocation.method(#getUserPreferredCurrency, []),
            returnValue: _i6.Future<_i3.Currency>.value(
              _FakeCurrency_1(
                this,
                Invocation.method(#getUserPreferredCurrency, []),
              ),
            ),
          )
          as _i6.Future<_i3.Currency>);

  @override
  _i6.Future<void> setUserPreferredCurrency(_i3.Currency? currency) =>
      (super.noSuchMethod(
            Invocation.method(#setUserPreferredCurrency, [currency]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> clearAllData() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllData, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [AIService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAIService extends _i1.Mock implements _i11.AIService {
  MockAIService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<String> processMessage(
    String? message,
    List<_i5.Expense>? userExpenses, {
    List<Map<String, String>>? conversationHistory,
    String? languageCode,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #processMessage,
              [message, userExpenses],
              {
                #conversationHistory: conversationHistory,
                #languageCode: languageCode,
              },
            ),
            returnValue: _i6.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(
                  #processMessage,
                  [message, userExpenses],
                  {
                    #conversationHistory: conversationHistory,
                    #languageCode: languageCode,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<Map<String, dynamic>?> extractExpenseInfo(String? message) =>
      (super.noSuchMethod(
            Invocation.method(#extractExpenseInfo, [message]),
            returnValue: _i6.Future<Map<String, dynamic>?>.value(),
          )
          as _i6.Future<Map<String, dynamic>?>);

  @override
  _i6.Future<String> generateSpendingInsights(List<_i5.Expense>? expenses) =>
      (super.noSuchMethod(
            Invocation.method(#generateSpendingInsights, [expenses]),
            returnValue: _i6.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#generateSpendingInsights, [expenses]),
              ),
            ),
          )
          as _i6.Future<String>);

  @override
  _i6.Future<bool> testGemini() =>
      (super.noSuchMethod(
            Invocation.method(#testGemini, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  String getProviderName() =>
      (super.noSuchMethod(
            Invocation.method(#getProviderName, []),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getProviderName, []),
            ),
          )
          as String);

  @override
  String getProviderModel() =>
      (super.noSuchMethod(
            Invocation.method(#getProviderModel, []),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getProviderModel, []),
            ),
          )
          as String);

  @override
  _i6.Future<bool> isGeminiAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isGeminiAvailable, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<Map<String, dynamic>> getGeminiStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getGeminiStatus, []),
            returnValue: _i6.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i6.Future<Map<String, dynamic>>);
}
