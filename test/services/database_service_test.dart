import 'dart:convert';
import 'package:flutter_test/flutter_test.dart';
import 'package:our_spends/models/expense.dart';
import 'package:our_spends/services/database_service.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  group('DatabaseService Tests', () {
    late DatabaseService databaseService;

    setUp(() {
      databaseService = DatabaseService();
    });

    test('should initialize with default categories', () async {
      // Setup SharedPreferences mock
      SharedPreferences.setMockInitialValues({});
      
      // Initialize database
      await databaseService.init();
      
      // Get categories to verify default categories were created
      final categories = await databaseService.getCategories();
      
      // Verify default categories exist
      expect(categories.length, greaterThan(0));
      expect(categories.any((c) => c.name == 'Food & Dining'), true);
      expect(categories.any((c) => c.name == 'Transportation'), true);
      expect(categories.any((c) => c.name == 'Shopping'), true);
    });

    test('should insert and retrieve an expense', () async {
      // Setup SharedPreferences mock
      SharedPreferences.setMockInitialValues({});
      
      // Create test expense
      final testExpense = Expense(
        id: '',  // ID will be generated by the service
        userId: 'test-user',
        date: DateTime(2023, 5, 15),
        amount: 50.0,
        currency: 'USD',
        category: 'Food & Dining',
        item: 'Test Expense',
      );
      
      // Insert expense
      final expenseId = await databaseService.insertExpense(testExpense);
      
      // Verify ID was generated
      expect(expenseId, isNotEmpty);
      
      // Retrieve expense
      final retrievedExpense = await databaseService.getExpenseById(expenseId);
      
      // Verify expense was retrieved correctly
      expect(retrievedExpense, isNotNull);
      expect(retrievedExpense?.userId, 'test-user');
      expect(retrievedExpense?.amount, 50.0);
      expect(retrievedExpense?.category, 'Food & Dining');
      expect(retrievedExpense?.item, 'Test Expense');
    });

    test('should update an expense', () async {
      // Setup SharedPreferences mock with an existing expense
      final existingExpense = Expense(
        id: 'test-id-123',
        userId: 'test-user',
        date: DateTime(2023, 5, 15),
        amount: 50.0,
        currency: 'USD',
        category: 'Food & Dining',
        item: 'Original Expense',
      );
      
      SharedPreferences.setMockInitialValues({
        'expenses_data': json.encode([existingExpense.toJson()]),
      });
      
      // Create updated expense
      final updatedExpense = existingExpense.copyWith(
        amount: 75.0,
        item: 'Updated Expense',
      );
      
      // Update expense
      await databaseService.updateExpense(updatedExpense);
      
      // Retrieve updated expense
      final retrievedExpense = await databaseService.getExpenseById('test-id-123');
      
      // Verify expense was updated
      expect(retrievedExpense, isNotNull);
      expect(retrievedExpense?.amount, 75.0);
      expect(retrievedExpense?.item, 'Updated Expense');
    });

    test('should delete an expense', () async {
      // Setup SharedPreferences mock with an existing expense
      final existingExpense = Expense(
        id: 'test-id-123',
        userId: 'test-user',
        date: DateTime(2023, 5, 15),
        amount: 50.0,
        currency: 'USD',
        category: 'Food & Dining',
        item: 'Test Expense',
      );
      
      SharedPreferences.setMockInitialValues({
        'expenses_data': json.encode([existingExpense.toJson()]),
      });
      
      // Verify expense exists before deletion
      var retrievedExpense = await databaseService.getExpenseById('test-id-123');
      expect(retrievedExpense, isNotNull);
      
      // Delete expense
      await databaseService.deleteExpense('test-id-123');
      
      // Verify expense was deleted
      retrievedExpense = await databaseService.getExpenseById('test-id-123');
      expect(retrievedExpense, isNull);
    });

    test('should filter expenses by category', () async {
      // Setup SharedPreferences mock with multiple expenses
      final expenses = [
        Expense(
          id: 'id1',
          userId: 'user1',
          date: DateTime(2023, 5, 15),
          amount: 50.0,
          currency: 'USD',
          category: 'Food & Dining',
          item: 'Lunch',
        ),
        Expense(
          id: 'id2',
          userId: 'user1',
          date: DateTime(2023, 5, 16),
          amount: 30.0,
          currency: 'USD',
          category: 'Transportation',
          item: 'Bus fare',
        ),
        Expense(
          id: 'id3',
          userId: 'user1',
          date: DateTime(2023, 5, 17),
          amount: 100.0,
          currency: 'USD',
          category: 'Food & Dining',
          item: 'Dinner',
        ),
      ];
      
      SharedPreferences.setMockInitialValues({
        'expenses_data': json.encode(expenses.map((e) => e.toJson()).toList()),
      });
      
      // Get expenses filtered by category
      final filteredExpenses = await databaseService.getExpenses(
        categoryId: 'Food & Dining',
      );
      
      // Verify filtering works
      expect(filteredExpenses.length, 2);
      expect(filteredExpenses.every((e) => e.category == 'Food & Dining'), true);
    });
  });
}