// Mocks generated by Mockito 5.4.6 from annotations
// in our_spends/test/screens/chat_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:our_spends/models/expense.dart' as _i4;
import 'package:our_spends/providers/expense/expense_provider.dart' as _i3;
import 'package:our_spends/providers/language_provider.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocale_0 extends _i1.SmartFake implements _i2.Locale {
  _FakeLocale_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ExpenseProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseProvider extends _i1.Mock implements _i3.ExpenseProvider {
  MockExpenseProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.Expense> get expenses =>
      (super.noSuchMethod(
            Invocation.getter(#expenses),
            returnValue: <_i4.Expense>[],
          )
          as List<_i4.Expense>);

  @override
  List<Map<String, dynamic>> get expensesWithTags =>
      (super.noSuchMethod(
            Invocation.getter(#expensesWithTags),
            returnValue: <Map<String, dynamic>>[],
          )
          as List<Map<String, dynamic>>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  _i5.Future<void> get initializationDone =>
      (super.noSuchMethod(
            Invocation.getter(#initializationDone),
            returnValue: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Stream<List<Map<String, dynamic>>> get expensesStream =>
      (super.noSuchMethod(
            Invocation.getter(#expensesStream),
            returnValue: _i5.Stream<List<Map<String, dynamic>>>.empty(),
          )
          as _i5.Stream<List<Map<String, dynamic>>>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> loadExpenses() =>
      (super.noSuchMethod(
            Invocation.method(#loadExpenses, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void setLoading(bool? loading) => super.noSuchMethod(
    Invocation.method(#setLoading, [loading]),
    returnValueForMissingStub: null,
  );

  @override
  void setError(String? error) => super.noSuchMethod(
    Invocation.method(#setError, [error]),
    returnValueForMissingStub: null,
  );

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> loadExpensesForTesting() =>
      (super.noSuchMethod(
            Invocation.method(#loadExpensesForTesting, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String?> addExpense(_i4.Expense? expense, List<String>? tagIds) =>
      (super.noSuchMethod(
            Invocation.method(#addExpense, [expense, tagIds]),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<bool> updateExpense(_i4.Expense? expense, List<String>? tagIds) =>
      (super.noSuchMethod(
            Invocation.method(#updateExpense, [expense, tagIds]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> deleteExpense(String? expenseId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpense, [expenseId]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<Map<String, List<_i4.Expense>>> getExpensesGroupedByTag({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getExpensesGroupedByTag, [], {
              #startDate: startDate,
              #endDate: endDate,
            }),
            returnValue: _i5.Future<Map<String, List<_i4.Expense>>>.value(
              <String, List<_i4.Expense>>{},
            ),
          )
          as _i5.Future<Map<String, List<_i4.Expense>>>);

  @override
  _i5.Future<Map<String, dynamic>?> getExpenseWithTags(String? expenseId) =>
      (super.noSuchMethod(
            Invocation.method(#getExpenseWithTags, [expenseId]),
            returnValue: _i5.Future<Map<String, dynamic>?>.value(),
          )
          as _i5.Future<Map<String, dynamic>?>);

  @override
  void addListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [LanguageProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageProvider extends _i1.Mock implements _i6.LanguageProvider {
  MockLanguageProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Locale get currentLocale =>
      (super.noSuchMethod(
            Invocation.getter(#currentLocale),
            returnValue: _FakeLocale_0(this, Invocation.getter(#currentLocale)),
          )
          as _i2.Locale);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i5.Future<void> changeLanguage(String? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#changeLanguage, [languageCode]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  String getCurrentLanguageName() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentLanguageName, []),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.method(#getCurrentLanguageName, []),
            ),
          )
          as String);

  @override
  String getLanguageName(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#getLanguageName, [code]),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.method(#getLanguageName, [code]),
            ),
          )
          as String);

  @override
  void addListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i2.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
