// Mocks generated by Mockito 5.4.6 from annotations
// in our_spends/test/services/expense_query_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:our_spends/models/expense.dart' as _i4;
import 'package:our_spends/models/tag.dart' as _i7;
import 'package:our_spends/repositories/expense_repository.dart' as _i2;
import 'package:our_spends/repositories/tag_repository.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ExpenseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseRepository extends _i1.Mock implements _i2.ExpenseRepository {
  MockExpenseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Expense>> getExpenses({
    DateTime? startDate,
    DateTime? endDate,
    double? minAmount,
    double? maxAmount,
    String? searchQuery,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getExpenses, [], {
              #startDate: startDate,
              #endDate: endDate,
              #minAmount: minAmount,
              #maxAmount: maxAmount,
              #searchQuery: searchQuery,
              #limit: limit,
              #offset: offset,
            }),
            returnValue: _i3.Future<List<_i4.Expense>>.value(<_i4.Expense>[]),
          )
          as _i3.Future<List<_i4.Expense>>);

  @override
  _i3.Future<_i4.Expense?> getExpenseById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getExpenseById, [id]),
            returnValue: _i3.Future<_i4.Expense?>.value(),
          )
          as _i3.Future<_i4.Expense?>);

  @override
  _i3.Future<String> insertExpense(_i4.Expense? expense) =>
      (super.noSuchMethod(
            Invocation.method(#insertExpense, [expense]),
            returnValue: _i3.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#insertExpense, [expense]),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<void> updateExpense(_i4.Expense? expense) =>
      (super.noSuchMethod(
            Invocation.method(#updateExpense, [expense]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteExpense(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpense, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Expense>> searchExpenses(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchExpenses, [query]),
            returnValue: _i3.Future<List<_i4.Expense>>.value(<_i4.Expense>[]),
          )
          as _i3.Future<List<_i4.Expense>>);

  @override
  _i3.Future<double> getMonthlySpending(int? year, int? month) =>
      (super.noSuchMethod(
            Invocation.method(#getMonthlySpending, [year, month]),
            returnValue: _i3.Future<double>.value(0.0),
          )
          as _i3.Future<double>);

  @override
  _i3.Future<List<Map<String, dynamic>>> getSpendingTrends({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getSpendingTrends, [], {
              #startDate: startDate,
              #endDate: endDate,
            }),
            returnValue: _i3.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i3.Future<List<Map<String, dynamic>>>);

  @override
  _i3.Future<String> exportToCSV({DateTime? startDate, DateTime? endDate}) =>
      (super.noSuchMethod(
            Invocation.method(#exportToCSV, [], {
              #startDate: startDate,
              #endDate: endDate,
            }),
            returnValue: _i3.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#exportToCSV, [], {
                  #startDate: startDate,
                  #endDate: endDate,
                }),
              ),
            ),
          )
          as _i3.Future<String>);
}

/// A class which mocks [TagRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTagRepository extends _i1.Mock implements _i6.TagRepository {
  MockTagRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i7.Tag>> getTags() =>
      (super.noSuchMethod(
            Invocation.method(#getTags, []),
            returnValue: _i3.Future<List<_i7.Tag>>.value(<_i7.Tag>[]),
          )
          as _i3.Future<List<_i7.Tag>>);

  @override
  _i3.Future<_i7.Tag?> getTagById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTagById, [id]),
            returnValue: _i3.Future<_i7.Tag?>.value(),
          )
          as _i3.Future<_i7.Tag?>);

  @override
  _i3.Future<void> addTag(_i7.Tag? tag) =>
      (super.noSuchMethod(
            Invocation.method(#addTag, [tag]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updateTag(_i7.Tag? tag) =>
      (super.noSuchMethod(
            Invocation.method(#updateTag, [tag]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTag(String? tagId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTag, [tagId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<String>> getExpenseTags(String? expenseId) =>
      (super.noSuchMethod(
            Invocation.method(#getExpenseTags, [expenseId]),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<void> setExpenseTags(String? expenseId, List<String>? tagIds) =>
      (super.noSuchMethod(
            Invocation.method(#setExpenseTags, [expenseId, tagIds]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
